#!/usr/bin/env ruby

require "fileutils"
require "tmpdir"
require "yaml"

include FileUtils

def sh(*command_line)
  if command_line.first.is_a?(Hash)
    env = command_line.shift
  else
    env = {}
  end
  if command_line.last.is_a?(Hash)
    spawn_options = command_line.pop
  else
    spawn_options = {}
  end
  puts(command_line.join(" "))
  system(env, *command_line, spawn_options) or exit(false)
end

def merge_environment_variables(variables)
  variables = variables.dup
  target_paths = [
    "PATH",
    "LD_LIBRARY_PATH",
    "PKG_CONFIG_PATH",
  ]
  target_paths.each do |target_path|
    all_paths = [
      ENV[target_path],
      variables[target_path],
    ]
    variables[target_path] = all_paths.compact.join(File::PATH_SEPARATOR)
  end
  variables["GROONGA_BASE_PATH"]     = ENV["GROONGA_BASE_PATH"]
  variables["GROONGA_DATABASE_PATH"] = ENV["GROONGA_DATABASE_PATH"]
  variables
end

class Arguments < Struct.new(:build_dir, :cache_dir, :env_dir)
  def environment_variables
    return {} if env_dir.nil?

    variables = {}
    Dir.chdir(env_dir) do
      Dir.glob("*") do |key|
        variables[key] = File.read(key)
      end
    end
    variables
  end
end


def prepend_path_to_environment_variable(name, *paths)
  new_paths = paths + [ENV[name]]
  ENV[name] = new_paths.compact.join(File::PATH_SEPARATOR)
end

def setup_groonga_environment_variables(build_dir)
  prefix = File.join(build_dir, "vendor", "groonga")

  prepend_path_to_environment_variable("PATH",
                                       File.join(prefix, "bin"),
                                       File.join(prefix, "sbin"))

  prepend_path_to_environment_variable("LD_LIBRARY_PATH",
                                       File.join(prefix, "lib"))

  prepend_path_to_environment_variable("PKG_CONFIG_PATH",
                                       File.join(prefix, "lib", "pkgconfig"))
end

def setup_ruby_environment_variables(build_dir)
  ruby_paths = [
    File.join(build_dir, "bin"),
    File.join(build_dir, "vendor", "bundle", "bin")
  ]
  bundle_bin_glob = File.join(build_dir, "vendor", "bundle", "ruby", "*", "bin")
  ruby_paths += Dir.glob(bundle_bin_glob)
  prepend_path_to_environment_variable("PATH", ruby_paths)

  gem_paths = []
  bundle_gem_glob = File.join(build_dir, "vendor", "bundle", "ruby", "*")
  gem_paths += Dir.glob(bundle_gem_glob)
  prepend_path_to_environment_variable("GEM_PATH", gem_paths)
end

arguments = Arguments.new(*ARGV)

groonga_base_path = File.join(arguments.build_dir, "groonga")
ENV["GROONGA_BASE_PATH"] = groonga_base_path
groonga_database_path = File.join(groonga_base_path, "data", "db")
mkdir_p(File.dirname(groonga_database_path))
ENV["GROONGA_DATABASE_PATH"] = groonga_database_path

setup_groonga_environment_variables(arguments.build_dir)
setup_ruby_environment_variables(arguments.build_dir)

puts("-----> Initializing database")
Dir.chdir(arguments.build_dir) do
  sh(merge_environment_variables(arguments.environment_variables),
     "bundle", "exec", "ruby", File.join("groonga", "init.rb"))
end
